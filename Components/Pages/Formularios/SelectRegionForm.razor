@using SISTEMALEGAL.Models.DTOs
@using SISTEMALEGAL.Services.Interfaces

<div class="row g-3 mb-3">
    <!-- Región -->
    <div class="col-md-3">
        <label class="form-label">Región de Salud</label>
        <InputSelect class="form-select form-select-sm"
                     Value="@Dto.RegionSaludId"
                     ValueChanged="@(async (int? id) => await OnRegionChanged(id))"
                     ValueExpression="@(() => Dto.RegionSaludId)">
            <option value="">--Seleccione--</option>
            @foreach (var r in RegionesList)
            {
                <option value="@r.RegionSaludId">@r.Nombre</option>
            }
        </InputSelect>
        <ValidationMessage For="@(() => Dto.RegionSaludId)" />
    </div>

    <!-- Provincia -->
    <div class="col-md-3">
        <label class="form-label">Provincia</label>
        <InputSelect class="form-select form-select-sm"
                     Value="@Dto.ProvinciaId"
                     ValueChanged="@(async (int? id) => await OnProvinciaChanged(id))"
                     ValueExpression="@(() => Dto.ProvinciaId)">
            <option value="0">--Seleccione--</option>
            @foreach (var p in ProvinciasList)
            {
                <option value="@p.ProvinciaId">@p.Nombre</option>
            }
        </InputSelect>
        <ValidationMessage For="@(() => Dto.ProvinciaId)" />
    </div>

    <!-- Distrito -->
    <div class="col-md-3">
        <label class="form-label">Distrito</label>
        <InputSelect class="form-select form-select-sm"
                     Value="@Dto.DistritoId"
                     ValueChanged="@(async (int? id) => await OnDistritoChanged(id))"
                     ValueExpression="@(() => Dto.DistritoId)">
            <option value="0">--Seleccione--</option>
            @foreach (var d in DistritosList)
            {
                <option value="@d.DistritoId">@d.Nombre</option>
            }
        </InputSelect>
        <ValidationMessage For="@(() => Dto.DistritoId)" />
    </div>

    <!-- Corregimiento -->
    <div class="col-md-3">
        <label class="form-label">Corregimiento</label>
        <InputSelect class="form-select form-select-sm"
                     Value="@Dto.CorregimientoId"
                     ValueChanged="@(async (int? id) => await OnCorregimientoChanged(id))"
                     ValueExpression="@(() => Dto.CorregimientoId)">
            <option value="0">--Seleccione--</option>
            @foreach (var c in CorregimientosList)
            {
                <option value="@c.CorregimientoId">@c.Nombre</option>
            }
        </InputSelect>
        <ValidationMessage For="@(() => Dto.CorregimientoId)" />
    </div>
</div>

@code {
    [Parameter]
    public UbicacionDto Dto { get; set; }

    [Parameter]
    public EventCallback<UbicacionDto> DtoChanged { get; set; }

    private List<RegionSaludDto> RegionesList = new();
    private List<ProvinciaDto> ProvinciasList = new();
    private List<DistritoDto> DistritosList = new();
    private List<CorregimientoDto> CorregimientosList = new();

    [Inject]
    private IUbicacionService UbicacionService { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        RegionesList = await UbicacionService.GetAllRegionesAsync();
    }

    private async Task OnRegionChanged(int? id)
    {
        Dto.RegionSaludId = id;
        Dto.RegionSalud = RegionesList.FirstOrDefault(r => r.RegionSaludId == id)?.Nombre;

        if (id > 0)
        {
            ProvinciasList = await UbicacionService.GetProvinciasByRegionAsync(id ?? 0);
            Dto.ProvinciaId = 0;
            Dto.DistritoId = 0;
            Dto.CorregimientoId = 0;
            await DtoChanged.InvokeAsync(Dto);
        }
    }

    private async Task OnProvinciaChanged(int? id)
    {
        Dto.ProvinciaId = id;
        Dto.Provincia = ProvinciasList.FirstOrDefault(p => p.ProvinciaId == id)?.Nombre;

        if (id > 0)
        {
            DistritosList = await UbicacionService.GetDistritosByProvinciaAsync(id ?? 0);
            Dto.DistritoId = 0;
            Dto.CorregimientoId = 0;
            await DtoChanged.InvokeAsync(Dto);
        }
    }

    private async Task OnDistritoChanged(int? id)
    {
        Dto.DistritoId = id;
        Dto.Distrito = DistritosList.FirstOrDefault(d => d.DistritoId == id)?.Nombre;

        if (id > 0)
        {
            CorregimientosList = await UbicacionService.GetCorregimientosByDistritoAsync(id ?? 0);
            Dto.CorregimientoId = 0;
            await DtoChanged.InvokeAsync(Dto);
        }
    }

    private async Task OnCorregimientoChanged(int? id)
    {
        Dto.CorregimientoId = id;
        await DtoChanged.InvokeAsync(Dto);
    }
}