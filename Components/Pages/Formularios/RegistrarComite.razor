@page "/registrar-comite"
@using Microsoft.AspNetCore.Authorization
@using SISTEMALEGAL.DTOs
@using SISTEMALEGAL.Models.Entities.BdSisLegal
@using SISTEMALEGAL.Repositories.Interfaces
@inject IRegistroComiteService RegistroService
@inject NavigationManager Nav
@attribute [Authorize]

<PageTitle>Registrar Comité</PageTitle>

<h3 class="mb-4 text-primary">
    <i class="bi bi-people-fill me-2"></i>Registro de Comité de Salud
</h3>

<EditForm Model="@Model" OnValidSubmit="RegistrarComite">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <!-- Información del Comité -->
    <div class="card mb-4">
        <div class="card-header bg-primary text-white">
            <h5><i class="bi bi-info-circle me-2"></i>Información del Comité</h5>
        </div>
        <div class="card-body">
            <div class="row mb-3">
                <div class="col-md-6">
                    <label class="form-label">Nombre del Comité</label>
                    <InputText class="form-control" @bind-Value="Model.NombreComiteSalud" />
                    <ValidationMessage For="@(() => Model.NombreComiteSalud)" />
                </div>
                <div class="col-md-6">
                    <label class="form-label">Comunidad</label>
                    <InputText class="form-control" @bind-Value="Model.Comunidad" />
                </div>
            </div>

            <div class="row mb-3">
                <div class="col-md-3">
                    <label class="form-label">Región de Salud</label>
                    <InputSelect class="form-select" @bind-Value="Model.RegionSaludId" 
                                 @onchange="async () => await CargarProvincias()">
                        <option value="0">Seleccionar...</option>
                        @foreach (var region in Regiones)
                        {
                            <option value="@region.RegionSaludId">@region.NombreRegion</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => Model.RegionSaludId)" />
                </div>

                <div class="col-md-3">
                    <label class="form-label">Provincia</label>
                    <InputSelect class="form-select" @bind-Value="Model.ProvinciaId" disabled="@(Provincias.Count == 0)"
                                 @onchange="async () => await CargarDistritos()">
                        <option value="0">Seleccionar...</option>
                        @foreach (var provincia in Provincias)
                        {
                            <option value="@provincia.ProvinciaId">@provincia.NombreProvincia</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => Model.ProvinciaId)" />
                </div>

                <div class="col-md-3">
                    <label class="form-label">Distrito</label>
                    <InputSelect class="form-select" @bind-Value="Model.DistritoId" disabled="@(Distritos.Count == 0)"
                                 @onchange="async () => await CargarCorregimientos()">
                        <option value="0">Seleccionar...</option>
                        @foreach (var distrito in Distritos)
                        {
                            <option value="@distrito.DistritoId">@distrito.NombreDistrito</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => Model.DistritoId)" />
                </div>

                <div class="col-md-3">
                    <label class="form-label">Corregimiento</label>
                    <InputSelect class="form-select" @bind-Value="Model.CorregimientoId" disabled="@(Corregimientos.Count == 0)">
                        <option value="0">Seleccionar...</option>
                        @foreach (var corregimiento in Corregimientos)
                        {
                            <option value="@corregimiento.CorregimientoId">@corregimiento.NombreCorregimiento</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => Model.CorregimientoId)" />
                </div>
            </div>
        </div>
    </div>

    <!-- Miembros del Comité -->
    <div class="card mb-4">
        <div class="card-header bg-success text-white">
            <div class="d-flex justify-content-between align-items-center">
                <h5><i class="bi bi-person-lines-fill me-2"></i>Miembros del Comité</h5>
                <button type="button" class="btn btn-sm btn-light" @onclick="AgregarMiembro">
                    <i class="bi bi-plus-circle me-1"></i>Agregar Miembro
                </button>
            </div>
        </div>
        <div class="card-body">
            @for (int i = 0; i < Model.Miembros.Count; i++)
            {
                var miembro = Model.Miembros[i];
                <div class="row mb-3 border-bottom pb-3">
                    <div class="col-md-4">
                        <label class="form-label">Nombre Completo</label>
                        <InputText class="form-control" @bind-Value="miembro.NombreMiembro" />
                        <ValidationMessage For="@(() => miembro.NombreMiembro)" />
                    </div>
                    <div class="col-md-3">
                        <label class="form-label">Cédula</label>
                        <InputText class="form-control" @bind-Value="miembro.CedulaMiembro" />
                        <ValidationMessage For="@(() => miembro.CedulaMiembro)" />
                    </div>
                    <div class="col-md-3">
                        <label class="form-label">Cargo</label>
                        <InputSelect class="form-select" @bind-Value="miembro.CargoId">
                            <option value="0">Seleccionar...</option>
                            @foreach (var cargo in Cargos)
                            {
                                <option value="@cargo.CargoId">@cargo.NombreCargo</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => miembro.CargoId)" />
                    </div>
                    <div class="col-md-2 d-flex align-items-end">
                        <button type="button" class="btn btn-danger" 
                            @onclick="() => EliminarMiembro(i)" 
                            disabled="@(Model.Miembros.Count <= 1)">
                            <i class="bi bi-trash"></i>
                        </button>
                    </div>
                </div>
            }
        </div>
    </div>

    <div class="d-flex justify-content-end gap-2">
        <button type="button" class="btn btn-secondary" onclick="Cancelar">
            Cancelar
        </button>
        <button type="submit" class="btn btn-primary" disabled="@isProcessing">
            @if (isProcessing)
            {
                <span class="spinner-border spinner-border-sm" role="status"></span>
                <span> Procesando...</span>
            }
            else
            {
                <span>Registrar Comité</span>
            }
        </button>
    </div>
</EditForm>

@if (mensaje != null)
{
    <div class="alert @(mensaje.Exito ? "alert-success mt-3" : "alert-danger mt-3")">
        @mensaje.Mensaje
        @if (mensaje.Errores.Any())
        {
            <ul>
                @foreach (var error in mensaje.Errores)
                {
                    <li>@error</li>
                }
            </ul>
        }
    </div>
}

@code {
    private RegistroComiteDTO Model = new();
    private List<TbRegionSalud> Regiones { get; set; } = new();
    private List<TbProvincia> Provincias { get; set; } = new();
    private List<TbDistrito> Distritos { get; set; } = new();
    private List<TbCorregimiento> Corregimientos { get; set; } = new();
    private List<TbCargosMiembrosComite> Cargos { get; set; } = new();

    private bool isProcessing = false;
    private ResultadoOperacion<int>? mensaje;

    protected override async Task OnInitializedAsync()
    {
        Regiones = (await RegistroService.ObtenerRegiones()).ToList();
        // Cargos = await _context.TbCargosMiembrosComite.Where(c => c.IsActivo).ToListAsync();
        Model.Miembros.Add(new MiembroComiteDTO());
    }

    private async Task CargarProvincias()
    {
        if (Model.RegionSaludId > 0)
        {
            Provincias = await RegistroService.ObtenerProvincias(Model.RegionSaludId);
            Model.ProvinciaId = 0;
            Distritos.Clear();
            Corregimientos.Clear();
        }
    }

    private async Task CargarDistritos()
    {
        if (Model.ProvinciaId > 0)
        {
            Distritos = await RegistroService.ObtenerDistritos(Model.ProvinciaId);
            Model.DistritoId = 0;
            Corregimientos.Clear();
        }
    }

    private async Task CargarCorregimientos()
    {
        if (Model.DistritoId > 0)
        {
            Corregimientos = await RegistroService.ObtenerCorregimientos(Model.DistritoId);
            Model.CorregimientoId = 0;
        }
    }

    private void AgregarMiembro()
    {
        Model.Miembros.Add(new MiembroComiteDTO());
    }

    private void EliminarMiembro(int index)
    {
        if (Model.Miembros.Count > 1)
        {
            Model.Miembros.RemoveAt(index);
        }
    }

    private async Task RegistrarComite()
    {
        mensaje = null;
        isProcessing = true;

        try
        {
            var userId = await ObtenerUsuarioId();
            mensaje = await RegistroService.RegistrarComite(Model, userId);

            if (mensaje.Exito)
            {
                Nav.NavigateTo("/gracias");
            }
        }
        catch (Exception ex)
        {
            mensaje = new ResultadoOperacion<int>
            {
                Exito = false,
                Mensaje = "Error al registrar el comité",
                Errores = new List<string> { ex.Message }
            };
        }
        finally
        {
            isProcessing = false;
        }
    }

    private async Task<string> ObtenerUsuarioId()
    {
        // var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        // var user = authState.User;
        //
        // return user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value
        //        ?? throw new UnauthorizedAccessException("Usuario no autenticado");
    }
}