@page "/registrar-asociacion"
@using Microsoft.AspNetCore.Components.Web
@using SISTEMALEGAL.Components.Layout
@using SISTEMALEGAL.Models.DTOs
@using SISTEMALEGAL.Services.Interfaces
@inject IAsociacionRepository AsociacionRepo
@inject IUbicacionService UbicacionService
@inject NavigationManager NavManager
@layout EmptyLayout

<PageTitle>Nueva Asociación</PageTitle>

<div class="container mt-4">
    <div class="card shadow-sm border-0 rounded-3">
        <div class="card-header bg-success text-white rounded-top">
            <h4 class="mb-0">Registro de Asociación</h4>
        </div>
        <div class="card-body">

            <EditForm Model="@dto" OnValidSubmit="Guardar">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <!-- Datos básicos -->
                <div class="row mb-3">
                    <div class="col-md-6">
                        <label class="form-label">Nombre de la Asociación</label>
                        <InputText @bind-Value="dto.Asociacion" class="form-control" />
                        <ValidationMessage For="@(() => dto.Asociacion)" />
                    </div>
                    <div class="col-md-6">
                        <label class="form-label">Actividad de Salud</label>
                        <InputText @bind-Value="dto.ActividadSalud" class="form-control" />
                    </div>
                </div>

                <!-- Selección geográfica -->
                <SelectRegionForm dto="@ubicacion" />

                <!-- Información adicional -->
                <div class="row mb-3">
                    <div class="col-md-4">
                        <label class="form-label">Tomo</label>
                        <InputNumber @bind-Value="dto.Tomo" class="form-control" />
                    </div>
                    <div class="col-md-4">
                        <label class="form-label">Folio</label>
                        <InputNumber @bind-Value="dto.Folio" class="form-control" />
                    </div>
                    <div class="col-md-4">
                        <label class="form-label">Asiento</label>
                        <InputNumber @bind-Value="dto.Asiento" class="form-control" />
                    </div>
                </div>

                <!-- Resolución -->
                <div class="mb-3">
                    <label class="form-label">Resolución</label>
                    <InputTextArea @bind-Value="dto.Resolucion" class="form-control" rows="3" />
                </div>

                <!-- Fecha de creación -->
                <div class="mb-3">
                    <label class="form-label">Fecha de Creación</label>
                    <InputDate @bind-Value="dto.FechaCreacion" class="form-control" />
                    <ValidationMessage For="@(() => dto.FechaCreacion)" />
                </div>

                <!-- Representante Legal -->
                <div class="card mt-3 mb-3">
                    <div class="card-header bg-info text-white">Representante Legal</div>
                    <div class="card-body">
                        <div class="row g-2">
                            <div class="col-md-6">
                                <InputText @bind-Value="dto.RepresentanteLegal.Nombre" placeholder="Nombre" class="form-control" />
                            </div>
                            <div class="col-md-6">
                                <InputText @bind-Value="dto.RepresentanteLegal.Cedula" placeholder="Cédula" class="form-control" />
                            </div>
                            <div class="col-md-6 mt-2">
                                <InputText @bind-Value="dto.RepresentanteLegal.Cargo" placeholder="Cargo" class="form-control" />
                            </div>
                            <div class="col-md-6 mt-2">
                                <InputText @bind-Value="dto.RepresentanteLegal.Telefono" placeholder="Teléfono" class="form-control" />
                            </div>
                            <div class="col-md-12 mt-2">
                                <InputText @bind-Value="dto.RepresentanteLegal.Direccion" placeholder="Dirección" class="form-control" />
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Apoderado Legal -->
                <div class="card mt-3 mb-3">
                    <div class="card-header bg-warning text-dark">Apoderado Legal</div>
                    <div class="card-body">
                        <div class="row g-2">
                            <div class="col-md-6">
                                <InputText @bind-Value="dto.ApoderadoLegal.Nombre" placeholder="Nombre" class="form-control" />
                            </div>
                            <div class="col-md-6">
                                <InputText @bind-Value="dto.ApoderadoLegal.Cedula" placeholder="Cédula" class="form-control" />
                            </div>
                            <div class="col-md-6 mt-2">
                                <InputText @bind-Value="dto.ApoderadoLegal.Email" placeholder="Email" class="form-control" />
                            </div>
                            <div class="col-md-6 mt-2">
                                <InputText @bind-Value="dto.ApoderadoLegal.Telefono" placeholder="Teléfono" class="form-control" />
                            </div>
                            <div class="col-md-12 mt-2">
                                <InputText @bind-Value="dto.ApoderadoLegal.Direccion" placeholder="Dirección" class="form-control" />
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Cargar resolución -->
                <div class="mb-3">
                    <label>Cargar Resolución</label>
                    <InputFile multiple OnChange="CargarArchivos" />

                    @if (archivos.Any())
                    {
                        <ul class="mt-2 list-group list-group-flush">
                            @foreach (var file in archivos)
                            {
                                <li class="list-group-item">@file.Name (@file.Size KB)</li>
                            }
                        </ul>
                    }
                </div>

                <!-- Botón de guardar -->
                <button type="submit" class="btn btn-success mt-3">Guardar Asociación</button>
                <button type="button" class="btn btn-secondary ms-2 mt-3" @onclick="LimpiarCampos">Limpiar</button>
            </EditForm>
        </div>
    </div>
    <div>
        <button type="button" class="btn btn-secondary me-2" @onclick="Regresar">Regresar</button>
    </div>
</div>

@code {
    private RegistroAsociacionDto dto = new()
    {
        RepresentanteLegal = new RepresentanteLegalDto(),
        ApoderadoLegal = new ApoderadoLegalDto()
    };
    private UbicacionDto ubicacion = new();
    private List<IBrowserFile> archivos = new();

    protected override void OnInitialized()
    {
        // Si es edición, puedes cargar aquí desde el repositorio
    }

    private async Task CargarArchivos(InputFileChangeEventArgs e)
    {
        foreach (var file in e.GetMultipleFiles())
        {
            var nombreUnico = Guid.NewGuid() + Path.GetExtension(file.Name);
            var rutaRelativa = $"/archivos/asociaciones/resoluciones/{nombreUnico}";
            var fullPath = Path.Combine("wwwroot", "archivos", "asociaciones", "resoluciones", nombreUnico);

            using var stream = new FileStream(fullPath, FileMode.Create);
            await file.OpenReadStream().CopyToAsync(stream);

            dto.DocumentosAdjuntos.Add(new DocumentoAdjuntoDto
            {
                NombreOriginal = file.Name,
                RutaArchivo = rutaRelativa,
                TipoDocumento = "Resolución",
                FechaSubida = DateTime.Now
            });
        }
    }

    private async Task Guardar()
    {
        // Asigna valores geográficos desde el componente
        dto.RegionSalud = ubicacion.RegionSalud;
        dto.Provincia = ubicacion.Provincia;
        dto.Distrito = ubicacion.Distrito;
        dto.Corregimiento = ubicacion.Corregimiento;

        if (!dto.FechaCreacion.HasValue)
        {
            // Muestra mensaje de error si la fecha es obligatoria
            return;
        }

        await AsociacionRepo.CreateAsync(dto);
        NavManager.NavigateTo("/asociaciones");
    }

    private void LimpiarCampos()
    {
        dto = new();
        ubicacion = new();
    }
    private void Regresar()
    {
        NavManager.NavigateTo("/");
    }
}