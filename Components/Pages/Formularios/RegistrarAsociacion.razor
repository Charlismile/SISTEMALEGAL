@page "/registrar-asociacion"
@using System.Security.Claims
@using Microsoft.AspNetCore.Authorization
@using LegalSystem.Server.Services
@using SISTEMALEGAL.DTOs
@using SISTEMALEGAL.Repositories.Interfaces
@inject IRegistroAsociacionService RegistroAsociacionService
@inject NavigationManager Nav
@attribute [Authorize]

<PageTitle>Registrar Asociación</PageTitle>

<div class="container py-4">
    <h2 class="mb-4 text-primary">
        <i class="bi bi-building me-2"></i>Registro de Asociación Sin Fines de Lucro
    </h2>

    <EditForm Model="@Model" OnValidSubmit="RegistrarAsociacion">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <!-- Información de la Asociación -->
        <div class="card mb-4">
            <div class="card-header bg-primary text-white">
                <h5><i class="bi bi-info-circle me-2"></i>Información de la Asociación</h5>
            </div>
            <div class="card-body">
                <div class="row mb-3">
                    <div class="col-md-6">
                        <label class="form-label">Nombre de la Asociación</label>
                        <InputText class="form-control" @bind-Value="Model.NombreAsociacion" />
                        <ValidationMessage For="@(() => Model.NombreAsociacion)" />
                    </div>
                    <div class="col-md-6">
                        <label class="form-label">Folio</label>
                        <InputNumber class="form-control" @bind-Value="Model.Folio" />
                        <ValidationMessage For="@(() => Model.Folio)" />
                    </div>
                </div>

                <div class="mb-3">
                    <label class="form-label">Actividad Principal</label>
                    <InputTextArea class="form-control" @bind-Value="Model.Actividad" rows="3" />
                    <ValidationMessage For="@(() => Model.Actividad)" />
                </div>
            </div>
        </div>

        <!-- Representante Legal -->
        <div class="card mb-4">
            <div class="card-header bg-success text-white">
                <h5><i class="bi bi-person-badge me-2"></i>Representante Legal</h5>
            </div>
            <div class="card-body">
                <div class="row mb-3">
                    <div class="col-md-6">
                        <label class="form-label">Nombre Completo</label>
                        <InputText class="form-control" @bind-Value="Model.Representante.NombreRepLegal" />
                        <ValidationMessage For="@(() => Model.Representante.NombreRepLegal)" />
                    </div>
                    <div class="col-md-6">
                        <label class="form-label">Cédula</label>
                        <InputText class="form-control" @bind-Value="Model.Representante.CedulaRepLegal" />
                        <ValidationMessage For="@(() => Model.Representante.CedulaRepLegal)" />
                    </div>
                </div>

                <div class="row mb-3">
                    <div class="col-md-6">
                        <label class="form-label">Cargo</label>
                        <InputText class="form-control" @bind-Value="Model.Representante.CargoRepLegal" />
                        <ValidationMessage For="@(() => Model.Representante.CargoRepLegal)" />
                    </div>
                    <div class="col-md-6">
                        <label class="form-label">Teléfono</label>
                        <InputText class="form-control" @bind-Value="Model.Representante.TelefonoRepLegal" />
                    </div>
                </div>

                <div class="mb-3">
                    <label class="form-label">Dirección</label>
                    <InputTextArea class="form-control" @bind-Value="Model.Representante.DireccionRepLegal" rows="2" />
                </div>
            </div>
        </div>

        <!-- Apoderado Legal -->
        <div class="card mb-4">
            <div class="card-header bg-warning text-dark">
                <h5><i class="bi bi-person-check me-2"></i>Apoderado Legal</h5>
            </div>
            <div class="card-body">
                <div class="row mb-3">
                    <div class="col-md-6">
                        <label class="form-label">Nombre Completo</label>
                        <InputText class="form-control" @bind-Value="Model.Apoderado.NombreApoAbogado" />
                        <ValidationMessage For="@(() => Model.Apoderado.NombreApoAbogado)" />
                    </div>
                    <div class="col-md-6">
                        <label class="form-label">Cédula</label>
                        <InputText class="form-control" @bind-Value="Model.Apoderado.CedulaApoAbogado" />
                        <ValidationMessage For="@(() => Model.Apoderado.CedulaApoAbogado)" />
                    </div>
                </div>

                <div class="row mb-3">
                    <div class="col-md-6">
                        <label class="form-label">Teléfono</label>
                        <InputText class="form-control" @bind-Value="Model.Apoderado.TelefonoApoAbogado" />
                    </div>
                    <div class="col-md-6">
                        <label class="form-label">Correo Electrónico</label>
                        <InputText class="form-control" @bind-Value="Model.Apoderado.CorreoApoAbogado" />
                    </div>
                </div>

                <div class="mb-3">
                    <label class="form-label">Dirección</label>
                    <InputTextArea class="form-control" @bind-Value="Model.Apoderado.DireccionApoAbogado" rows="2" />
                </div>
            </div>
        </div>

        <!-- Botones -->
        <div class="d-flex justify-content-end gap-2">
            <button type="button" class="btn btn-secondary" @onclick="Cancelar">
                Cancelar
            </button>
            <button type="submit" class="btn btn-primary" disabled="@isProcessing">
                @if (isProcessing)
                {
                    <span class="spinner-border spinner-border-sm" role="status"></span>
                    <span> Procesando...</span>
                }
                else
                {
                    <span>Registrar Asociación</span>
                }
            </button>
        </div>
    </EditForm>
</div>

@if (!string.IsNullOrEmpty(resultado.Mensaje))
{
    <div class="alert @(resultado.Exito ? "alert-success" : "alert-danger") mt-3">
        @resultado.Mensaje
        @if (resultado.Errores.Any())
        {
            <ul>
                @foreach (var error in resultado.Errores)
                {
                    <li>@error</li>
                }
            </ul>
        }
    </div>
}

@code {
    private RegistroAsociacionDTO Model { get; set; } = new();
    private bool isProcessing = false;
    private ResultadoOperacion<int>? resultado;

    protected override void OnInitialized()
    {
        // Inicializa los objetos anidados
        Model.Representante = new RepresentanteLegalDTO();
        Model.Apoderado = new ApoderadoLegalDTO();
    }

    private async Task RegistrarAsociacion()
    {
        isProcessing = true;
        var userId = await ObtenerUsuarioId();

        try
        {
            var respuesta = await AsociacionService.RegistrarAsociacion(Model, userId);

            if (respuesta.Exito)
            {
                Nav.NavigateTo($"/registro-exitoso?tipo=asociacion&id={respuesta.Data}");
            }
            else
            {
                resultado = respuesta;
            }
        }
        catch (Exception ex)
        {
            resultado = new ResultadoOperacion<int>
            {
                Exito = false,
                Mensaje = "Error al registrar la asociación",
                Errores = new List<string> { ex.Message }
            };
        }
        finally
        {
            isProcessing = false;
        }
    }

    private async Task<string> ObtenerUsuarioId()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity is not null && user.Identity.IsAuthenticated)
        {
            return user.FindFirstValue(ClaimTypes.NameIdentifier);
        }

        throw new UnauthorizedAccessException("Usuario no autenticado");
    }

    private void Cancelar()
    {
        Nav.NavigateTo("/");
    }
}